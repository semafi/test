<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="DELETE">
        <active>true</active>
        <description/>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_376096_pxp.approval_inject</name>
        <script><![CDATA[var x_376096_pxp = x_376096_pxp || {};

x_376096_pxp.approval_inject = (function() {
	"use strict";
	/* global setTimeout, MutationObserver */
	/* eslint no-undef: "error" */
	
	if (x_376096_pxp.approval_inject) {
		return x_376096_pxp.approval_inject;
	}
	
	var requireCommentConfig = {
		'approve': false,
		'reject': true
	};
	
	var targetWidgets = [
		// '<Sys ID of Target Widget>', // [widget-id] <Target Widget Name> (<used page>)
		'f37aa302cb70020000f8d856634c9cfc', // [] Approvals (approvals)
		'33442352cb30020000f8d856634c9c3f', // [] Approval Info (approval)
		'0d4be14b87473300926420eac5cb0b6c', // [] CSM Approval Info (csm_approval)
	];
	
	setTimeout(function () {
		var $window = this;
		var cache = {};
		var observer = new MutationObserver(function (mutations) {
			for (var i = 0; i < mutations.length; i++) {
				var mutation = mutations[i];
				if (mutation.addedNodes) {
					for (var j = 0; j < mutation.addedNodes.length; j++) {
						var node = mutation.addedNodes[j];
						if (node.classList) {
							if (!node.classList.contains('pxp-approval-injected')) {
								for (var k = 0; k < targetWidgets.length; k++) {
									if (node.classList.contains('v' + targetWidgets[k])) {
										node.classList.add('pxp-injected');
										new PXPApprovalInjector($window, node, cache);
										break;
									}
								}
							}
						}
					}
				}
			}
		});
		
		observer.observe($window.document, {
			childList: true,
			subtree: true
		});
	});

	return {
		type: "approval_inject"
	};
	
	function PXPApprovalInjector($window, node, cache) {
		var element = $window.angular.element(node);
		var $scope = element.scope();
		
		var $injector = element.injector();
		var $q = $injector.get('$q');
		var i18n = $injector.get('i18n');
		
		var $log = $injector.get('$log');
		var spUtil = $injector.get('spUtil');
		var spModal = $injector.get('spModal');
		var spUIActionsExecuter = $injector.get('spUIActionsExecuter');
		var $uibModalStack = $injector.get('$uibModalStack');
		
		if (!('getConfig' in cache)) {
			cache['getConfig'] = (function () {
				var deferred = $q.defer();
				
				var ga = new $window.GlideAjax('PortalApprovalUtilClient').setScope('x_376096_pxp');
				ga.addParam('sysparm_name', 'getConfig');
				ga.getXMLAnswer(function (answer) {
					try {
						if (answer) {
							deferred.resolve(JSON.parse(answer));
						} else {
							throw new Error('Failed to load Config');
						}
					} catch (e) {
						deferred.reject();

						$log.error(e, answer);
						if ($window.g_user_is_admin) {
							spUtil.addErrorMessage(e.message);
						}
					}
				});
				
				return function () {
					return deferred.promise;
				};
			})();
		}
		
		var approvalInProgress = false;
		var ESIGNATURE_PARAMS;
		var ESIGNATURE = {
			'approved': 'cbfe291147220100ba13a5554ee4904d',
			'rejected': '580f711147220100ba13a5554ee4904b'
		};

		// pre-load the messages
		i18n.getMessages(['OK', 'Cancel', 
			'Approve', 'Reject',
			'Please provide a comment for this approval', 'Provide an optional comment for this approval'
			], $window.angular.noop
		);
		
		$scope.approve = handleApproval.bind(this, 'approved');
		$scope.reject = handleApproval.bind(this, 'rejected');
		if ($scope.data.esignature) {
			ESIGNATURE_PARAMS = {
				username: $scope.data.esignature.username,
				userSysId: $scope.data.esignature.userSysId
			};
		}
		
		// only relevant for Widget 'Approval Info' (/sp?id=approval&sys_id=...)
		if ($scope.c) {
			$scope.c.action = function (action) {
				handleApproval(action, $scope.data.sys_id, $scope.data.esignature.e_sig_required);
			};
		}
		
		function handleApproval(action, sys_id, requireEsignatureApproval) {
			if (approvalInProgress) {
				return;
			}

			approvalInProgress = true;
			getApprovalComment(action).then(function (comment) {
				var deferred = $q.defer();

				if (requireEsignatureApproval) {
					var ootbDismiss = $uibModalStack.dismiss;

					// By default 'executeFormAction' doesn't reject the returned promise if the esignature login was canceled.
					// This cancellation needs to reset 'approvalInProgress', otherwise we're stuck in 'approvalInProgress = true'
					$uibModalStack.dismiss = function () {
						deferred.reject();

						$uibModalStack.dismiss = ootbDismiss;
						return ootbDismiss.apply($uibModalStack, arguments);
					};

					spUIActionsExecuter.executeFormAction(ESIGNATURE[action], 'sysapproval_approver', sys_id, [{ name: 'comments', value: comment }] , '', ESIGNATURE_PARAMS).then(deferred.resolve, deferred.reject)
					['finally'](function () {
						$uibModalStack.dismiss = ootbDismiss;
					});
				} else {
					var ga = new $window.GlideAjax('PortalApprovalUtilClient').setScope('x_376096_pxp');
					ga.addParam('sysparm_name', 'setApprovalState');
					ga.addParam('sys_id', sys_id);
					ga.addParam('state', action);
					ga.addParam('comment', comment);
					ga.getXMLAnswer(function (answer) {
						try {
							var result = JSON.parse(answer);
							if (result.status == 'success') {
								spUtil.update($scope);
								deferred.resolve();
							} else {
								throw new Error(result.message);
							}
						} catch (e) {
							deferred.reject();

							$log.error(e, answer);
							if ($window.g_user_is_admin) {
								spUtil.addErrorMessage(e.message);
							}
						}
					});
				}

				return deferred.promise;
			})['finally'](function () {
				approvalInProgress = false;
			});
		}
	
		function getApprovalComment(action) {
			var deferred = $q.defer();
			cache.getConfig().then(function (config) {
				var isApprove = action == 'approved';
				var commentRequired = isApprove ? config.approve_comment_mandatory : config.reject_comment_mandatory;
				if (!commentRequired && !config.always_confirm) {
					// no comment is required, the confirm popup is not desired
					deferred.resolve();
				} else {
					var modalTitle;
					var modalMessage = commentRequired ? 'x_376096_pxp_approval_comment_message' : 'x_376096_pxp_approval_comment_optional_message';
					var mandatoryText;
					if (isApprove) {
						modalTitle = 'Approve'; // translated ootb
						mandatoryText = 'x_376096_pxp_approval_approve_comment_mandatory';
					} else {
						modalTitle = 'Reject'; // translated ootb
						mandatoryText = 'x_376096_pxp_approval_reject_comment_mandatory';
					}

					i18n.getMessages(['OK', 'Cancel', modalTitle, modalMessage, mandatoryText], function (messages) {
						var inputOptions = {
							message: messages[modalMessage],
							text: '',
							textPlaceholder: '',
							required: commentRequired
						};

						spModal.open({
							title: messages[modalTitle],
							widget: 'x_376096_pxp_prompt',
							shared: inputOptions,
							backdrop: false, // disable close by click
							onSubmit: function () {
								if (!inputOptions.required || inputOptions.text) {
									return $q.resolve({ status: true });
								}

								return $q.resolve({ status: false, errorMessage: messages[mandatoryText] });
							}
						}).then(deferred.resolve, deferred.reject);
					});
				}
			}, deferred.reject);

			return deferred.promise;
		}
	}
// 					var modalObserver = {
// 						disconnect: self.$window.angular.noop
// 					};
//
// 					if (!commentRequired) {
// 						modalObserver = new self.$window.MutationObserver(function (mutations) {
// 							for (var i = 0; i < mutations.length; i++) {
// 								var mutation = mutations[i];
// 								if (mutation.addedNodes) {
// 									for (var j = 0; j < mutation.addedNodes.length; j++) {
// 										var node = mutation.addedNodes[j];
// 										if (node.id == 'xpInput') {
// 											node.removeAttribute('required');
//
// 											var modalDialog = node.closest("div[modal-render=true]");
// 											var modalScope = self.$window.angular.element(modalDialog).scope();
// 											modalScope.$watch('input.value', function () {
// 												modalScope.form.xpForm.$invalid = false;
// 											});
// 										}
// 									}
// 								}
// 							}
// 						});
//
// 						modalObserver.observe(self.$window.document, {
// 							childList: true,
// 							subtree: true
// 						});
// 					}
//
// 					self.spModal.open({
// 						title: messages[modalTitle],
// 						message: messages[modalMessage],
// 						widget: 'x_376096_pxp_confirm',
// 						shared: {
// 							label: 'test',
// 							comment: 'test2',
// 							required: true
// 						},
// 						input: true,
// 						buttons: [{
// 							label: messages['Cancel'],
// 							cancel: true
// 						}, {
// 							label: messages['OK'],
// 							primary: commentRequired,
// 							'class': 'btn-primary'
// 						}]
// 					}).then(deferred.resolve, deferred.reject)
// 					['catch'](function () {
// 						self.$log.error("catch", arguments);
// 					})
// 					['finally'](function () { 
// 						// for an unknown reason, observer.disconnect() must be called within a function.
// 						modalObserver.disconnect();
// 					});
// 			}
// 		}, deferred.reject);
//
// 		return deferred.promise;
// 	}
})();
]]></script>
        <script_name>approval_inject</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-07-03 21:03:16</sys_created_on>
        <sys_id>a1a9769497e851102f77b4b3f153af40</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>x_376096_pxp.approval_inject</sys_name>
        <sys_package display_value="Portal Experience" source="x_376096_pxp">b7a339a3971011102f77b4b3f153afd7</sys_package>
        <sys_policy/>
        <sys_scope display_value="Portal Experience">b7a339a3971011102f77b4b3f153afd7</sys_scope>
        <sys_update_name>sys_ui_script_a1a9769497e851102f77b4b3f153af40</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-11-13 20:43:30</sys_updated_on>
        <ui_type>1</ui_type>
        <use_scoped_format>true</use_scoped_format>
    </sys_ui_script>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Portal Experience">b7a339a3971011102f77b4b3f153afd7</application>
        <file_path/>
        <instance_id>2ca27526dbf6491042b321c405961935</instance_id>
        <instance_name>dev126060</instance_name>
        <name>sys_ui_script_a1a9769497e851102f77b4b3f153af40</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_script"&gt;&lt;sys_ui_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;description/&gt;&lt;global&gt;false&lt;/global&gt;&lt;ignore_in_now_experience&gt;false&lt;/ignore_in_now_experience&gt;&lt;name&gt;x_376096_pxp.approval_inject&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var x_376096_pxp = x_376096_pxp || {};

x_376096_pxp.approval_inject = (function() {
	"use strict";
	/* global setTimeout, MutationObserver */
	/* eslint no-undef: "error" */
	
	if (x_376096_pxp.approval_inject) {
		return x_376096_pxp.approval_inject;
	}
	
	var requireCommentConfig = {
		'approve': false,
		'reject': true
	};
	
	var targetWidgets = [
		// '&lt;Sys ID of Target Widget&gt;', // [widget-id] &lt;Target Widget Name&gt; (&lt;used page&gt;)
		'f37aa302cb70020000f8d856634c9cfc', // [] Approvals (approvals)
		'33442352cb30020000f8d856634c9c3f', // [] Approval Info (approval)
		'0d4be14b87473300926420eac5cb0b6c', // [] CSM Approval Info (csm_approval)
	];
	
	setTimeout(function () {
		var $window = this;
		var cache = {};
		var observer = new MutationObserver(function (mutations) {
			for (var i = 0; i &lt; mutations.length; i++) {
				var mutation = mutations[i];
				if (mutation.addedNodes) {
					for (var j = 0; j &lt; mutation.addedNodes.length; j++) {
						var node = mutation.addedNodes[j];
						if (node.classList) {
							if (!node.classList.contains('pxp-approval-injected')) {
								for (var k = 0; k &lt; targetWidgets.length; k++) {
									if (node.classList.contains('v' + targetWidgets[k])) {
										node.classList.add('pxp-injected');
										new PXPApprovalInjector($window, node, cache);
										break;
									}
								}
							}
						}
					}
				}
			}
		});
		
		observer.observe($window.document, {
			childList: true,
			subtree: true
		});
	});

	return {
		type: "approval_inject"
	};
	
	function PXPApprovalInjector($window, node, cache) {
		var element = $window.angular.element(node);
		var $scope = element.scope();
		
		var $injector = element.injector();
		var $q = $injector.get('$q');
		var i18n = $injector.get('i18n');
		
		var $log = $injector.get('$log');
		var spUtil = $injector.get('spUtil');
		var spModal = $injector.get('spModal');
		var spUIActionsExecuter = $injector.get('spUIActionsExecuter');
		var $uibModalStack = $injector.get('$uibModalStack');
		
		if (!('getConfig' in cache)) {
			cache['getConfig'] = (function () {
				var deferred = $q.defer();
				
				var ga = new $window.GlideAjax('PortalApprovalUtilClient').setScope('x_376096_pxp');
				ga.addParam('sysparm_name', 'getConfig');
				ga.getXMLAnswer(function (answer) {
					try {
						if (answer) {
							deferred.resolve(JSON.parse(answer));
						} else {
							throw new Error('Failed to load Config');
						}
					} catch (e) {
						deferred.reject();

						$log.error(e, answer);
						if ($window.g_user_is_admin) {
							spUtil.addErrorMessage(e.message);
						}
					}
				});
				
				return function () {
					return deferred.promise;
				};
			})();
		}
		
		var approvalInProgress = false;
		var ESIGNATURE_PARAMS;
		var ESIGNATURE = {
			'approved': 'cbfe291147220100ba13a5554ee4904d',
			'rejected': '580f711147220100ba13a5554ee4904b'
		};

		// pre-load the messages
		i18n.getMessages(['OK', 'Cancel', 
			'Approve', 'Reject',
			'Please provide a comment for this approval', 'Provide an optional comment for this approval'
			], $window.angular.noop
		);
		
		$scope.approve = handleApproval.bind(this, 'approved');
		$scope.reject = handleApproval.bind(this, 'rejected');
		if ($scope.data.esignature) {
			ESIGNATURE_PARAMS = {
				username: $scope.data.esignature.username,
				userSysId: $scope.data.esignature.userSysId
			};
		}
		
		// only relevant for Widget 'Approval Info' (/sp?id=approval&amp;sys_id=...)
		if ($scope.c) {
			$scope.c.action = function (action) {
				handleApproval(action, $scope.data.sys_id, $scope.data.esignature.e_sig_required);
			};
		}
		
		function handleApproval(action, sys_id, requireEsignatureApproval) {
			if (approvalInProgress) {
				return;
			}

			approvalInProgress = true;
			getApprovalComment(action).then(function (comment) {
				var deferred = $q.defer();

				if (requireEsignatureApproval) {
					var ootbDismiss = $uibModalStack.dismiss;

					// By default 'executeFormAction' doesn't reject the returned promise if the esignature login was canceled.
					// This cancellation needs to reset 'approvalInProgress', otherwise we're stuck in 'approvalInProgress = true'
					$uibModalStack.dismiss = function () {
						deferred.reject();

						$uibModalStack.dismiss = ootbDismiss;
						return ootbDismiss.apply($uibModalStack, arguments);
					};

					spUIActionsExecuter.executeFormAction(ESIGNATURE[action], 'sysapproval_approver', sys_id, [{ name: 'comments', value: comment }] , '', ESIGNATURE_PARAMS).then(deferred.resolve, deferred.reject)
					['finally'](function () {
						$uibModalStack.dismiss = ootbDismiss;
					});
				} else {
					var ga = new $window.GlideAjax('PortalApprovalUtilClient').setScope('x_376096_pxp');
					ga.addParam('sysparm_name', 'setApprovalState');
					ga.addParam('sys_id', sys_id);
					ga.addParam('state', action);
					ga.addParam('comment', comment);
					ga.getXMLAnswer(function (answer) {
						try {
							var result = JSON.parse(answer);
							if (result.status == 'success') {
								spUtil.update($scope);
								deferred.resolve();
							} else {
								throw new Error(result.message);
							}
						} catch (e) {
							deferred.reject();

							$log.error(e, answer);
							if ($window.g_user_is_admin) {
								spUtil.addErrorMessage(e.message);
							}
						}
					});
				}

				return deferred.promise;
			})['finally'](function () {
				approvalInProgress = false;
			});
		}
	
		function getApprovalComment(action) {
			var deferred = $q.defer();
			cache.getConfig().then(function (config) {
				var isApprove = action == 'approved';
				var commentRequired = isApprove ? config.approve_comment_mandatory : config.reject_comment_mandatory;
				if (!commentRequired &amp;&amp; !config.always_confirm) {
					// no comment is required, the confirm popup is not desired
					deferred.resolve();
				} else {
					var modalTitle;
					var modalMessage = commentRequired ? 'x_376096_pxp_approval_comment_message' : 'x_376096_pxp_approval_comment_optional_message';
					var mandatoryText;
					if (isApprove) {
						modalTitle = 'Approve'; // translated ootb
						mandatoryText = 'x_376096_pxp_approval_approve_comment_mandatory';
					} else {
						modalTitle = 'Reject'; // translated ootb
						mandatoryText = 'x_376096_pxp_approval_reject_comment_mandatory';
					}

					i18n.getMessages(['OK', 'Cancel', modalTitle, modalMessage, mandatoryText], function (messages) {
						var inputOptions = {
							message: messages[modalMessage],
							text: '',
							textPlaceholder: '',
							required: commentRequired
						};

						spModal.open({
							title: messages[modalTitle],
							widget: 'x_376096_pxp_prompt',
							shared: inputOptions,
							backdrop: false, // disable close by click
							onSubmit: function () {
								if (!inputOptions.required || inputOptions.text) {
									return $q.resolve({ status: true });
								}

								return $q.resolve({ status: false, errorMessage: messages[mandatoryText] });
							}
						}).then(deferred.resolve, deferred.reject);
					});
				}
			}, deferred.reject);

			return deferred.promise;
		}
	}
// 					var modalObserver = {
// 						disconnect: self.$window.angular.noop
// 					};
//
// 					if (!commentRequired) {
// 						modalObserver = new self.$window.MutationObserver(function (mutations) {
// 							for (var i = 0; i &lt; mutations.length; i++) {
// 								var mutation = mutations[i];
// 								if (mutation.addedNodes) {
// 									for (var j = 0; j &lt; mutation.addedNodes.length; j++) {
// 										var node = mutation.addedNodes[j];
// 										if (node.id == 'xpInput') {
// 											node.removeAttribute('required');
//
// 											var modalDialog = node.closest("div[modal-render=true]");
// 											var modalScope = self.$window.angular.element(modalDialog).scope();
// 											modalScope.$watch('input.value', function () {
// 												modalScope.form.xpForm.$invalid = false;
// 											});
// 										}
// 									}
// 								}
// 							}
// 						});
//
// 						modalObserver.observe(self.$window.document, {
// 							childList: true,
// 							subtree: true
// 						});
// 					}
//
// 					self.spModal.open({
// 						title: messages[modalTitle],
// 						message: messages[modalMessage],
// 						widget: 'x_376096_pxp_confirm',
// 						shared: {
// 							label: 'test',
// 							comment: 'test2',
// 							required: true
// 						},
// 						input: true,
// 						buttons: [{
// 							label: messages['Cancel'],
// 							cancel: true
// 						}, {
// 							label: messages['OK'],
// 							primary: commentRequired,
// 							'class': 'btn-primary'
// 						}]
// 					}).then(deferred.resolve, deferred.reject)
// 					['catch'](function () {
// 						self.$log.error("catch", arguments);
// 					})
// 					['finally'](function () { 
// 						// for an unknown reason, observer.disconnect() must be called within a function.
// 						modalObserver.disconnect();
// 					});
// 			}
// 		}, deferred.reject);
//
// 		return deferred.promise;
// 	}
})();
]]&gt;&lt;/script&gt;&lt;script_name&gt;approval_inject&lt;/script_name&gt;&lt;sys_class_name&gt;sys_ui_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2022-07-03 21:03:16&lt;/sys_created_on&gt;&lt;sys_id&gt;a1a9769497e851102f77b4b3f153af40&lt;/sys_id&gt;&lt;sys_mod_count&gt;13&lt;/sys_mod_count&gt;&lt;sys_name&gt;x_376096_pxp.approval_inject&lt;/sys_name&gt;&lt;sys_package display_value="Portal Experience" source="x_376096_pxp"&gt;b7a339a3971011102f77b4b3f153afd7&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Portal Experience"&gt;b7a339a3971011102f77b4b3f153afd7&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_script_a1a9769497e851102f77b4b3f153af40&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-11-13 20:43:30&lt;/sys_updated_on&gt;&lt;ui_type&gt;1&lt;/ui_type&gt;&lt;use_scoped_format&gt;true&lt;/use_scoped_format&gt;&lt;/sys_ui_script&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1508143605</payload_hash>
        <record_name>x_376096_pxp.approval_inject</record_name>
        <reverted_from/>
        <source>394b22a187d6151021d6fcc5dabb35f4</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-13 20:43:30</sys_created_on>
        <sys_id>aff6b7c39703d190d545b18e6253af28</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>18472bba17b0000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-11-13 20:43:30</sys_updated_on>
        <type>UI Script</type>
        <update_guid>e7f6b7c3a303d190e00379f4be52dc28</update_guid>
        <update_guid_history>e7f6b7c3a303d190e00379f4be52dc28:-1508143605,09a4bfcf68cf91905c1e50b97f2a748b:-2131486799,907433831f03d190915484ab411c33f9:-516176569,cf3373435803d1903e9a39b3b0fcf9e5:2036601574,72e1b3cf5acf9190ea8e5c11209fb730:-1138470258,7891bf8f55cf9190b6511a23dafa2fe6:-1547105878,aa41774b94cf9190f4808bf77d70ee91:859777120,8ec0b34b03cf919030cafc2a52bd8db3:1474787792,a57aab0bb5cf9190b9823d1aed20e74d:730666792,3852ea76010f51906bfb120c6cc2f721:318057682,a4908af64d8b519073a2248adf341c91:999431576,bebff1f26a8b519041e0f98052e92a1a:75998701,b123a93e460b519052a89388673cb399:152632897,a898de66390f119002f15dc5b89c7537:-1614301045,a6975226f10f1190390f70ba418c7329:-1381177844,3b575266200f119075296b135dd74b04:1547420381,79869ee2740f1190e29414a989a6b90d:1259845746,635556a2480f1190d79d5f5bcb2263b2:498044664,bfd41aa2d90f119017f350b600660b8b:-1520673310,eea492a2ee0f119016ef08039984c771:-593858285,45e356228b0f119092ff00d1ea1a115a:1534840786,16d192ee0ccb1190af3a8fce3d547c2d:1218950294,ee6152ee16cb11901c43fdb2cc3da5b2:-45394895,c130562e07cb11906cce7aa5f95d0e2e:1079911397,3700926ecfcb1190f7adf3f106096f83:-264567568,cedf062e81cb1190a93355c730c89e7c:1512230229,afb37dee354b1190c1e5cdd10c9d28b0:1586644445,5eb71126a90b119090c7d52f6bc245d4:1908489085,d7c302b1194f5d50647043b58e9318b4:60968942,6863ca31314f5d500d82403ad96ea182:158206501,21624efdfc0f5d5071bed2a2478e19a7:-1106065504,a62282315a4f5d503ab0bede4dccd2e7:-40720640,fbf106319c4f5d50b4404fab1355ac48:1994009716,b2e18231834f5d503772293a26d0eeaf:-689586831,da9182fdba0f5d5067376266dda63c61:-1632829309,08310a7d680f5d5041d3ec1b79a1793e:-1450530396,3de00a7d900f5d50ccd96313586d3302:1251782345,8a900a7d390f5d50b334c25b8f23a185:69452395,a1fefd3d8f0f5d505bf6f589ae4249c7:262504741,ddde79b9db0f5d507d15746366d5e5c2:-2057819210,2bcc3db5330f5d50df10d3c1a130658d:262504741,42bcb9b93e0f5d501feadcc15fb77e09:-2057819210,e79c79b9190f5d5021a734b7506f631d:-1417217363,f47c79b9e00f5d50b112fe845404a518:-2057819210,00b771b52c0f5d5049f744fcf3bf5dde:1463612971,23cfe57d4acb5d50aa2387923f59aa8b:-430326161,552fad7d0ccb5d50ea43fd86c66666e3:-1505203450,6c9e657d52cb5d500d66eb11a6e8be05:1336936155,bd4e69f950cb5d50433dd6db8e48e958:-56070164,cebce97908cb5d50147e9fbdb4897879:-360906735,e85a65797bcb5d50b6e951624eac912f:74582272,ae7da0fd00c75d50b062134b7561ced3:1926002060,dc8ca43d4ac75d5047ef95ec634d2e8e:-388944497,f22ce03dbdc75d50ab3e7c56a999289c:-1945680451,2999683d27c75d5081b9b807c4494537:-471947081,aff800f976475d5097465f2b692eaf0d:-1862102232,1aeb143d26769d1074f2321917eb48e0:189710352,e39bdcf9d0769d107bd18ace598f92a0:-784075214,d2bdcb83216e151003385c13f15f1c6f:189710352,a0eb4743986e15104aab1f3f985179da:694983,1a50967ef9aad110f051c29f97c3c141:189710352,0fefc23ee9aad11012bc70e3f6c97584:-658892842,1caf823ee9aad1103945a150af983126:840083223,011fc23a69aad110b32335a03a806ad8:2093035231,356ec6fa3aaad110941507db51ee1ab1:-370335966,af3ec23a82aad11067dd9434b6e27172:1729377861,78ddcef66daad11064cb471937a3ec2d:-911052561,f11ddef18b9655107ec4be2f8c5a5dd2:1399227553,3b7a8ba93b5a1510e326fada16cca0c9:-406751315,904c76e1895a15103d35b19fab104d3f:520949991,b28f6a25e51a1510323ec7faca743a25:-536764706,533b66a11b1a1510a61c10bbeff775e6:495349921</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-20 10:55:22</sys_created_on>
        <sys_db_object display_value="" name="sys_ui_script">sys_ui_script</sys_db_object>
        <sys_id>b4017b128f3b47dc915b15c8c802e990</sys_id>
        <sys_metadata>a1a9769497e851102f77b4b3f153af40</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>x_376096_pxp.approval_inject</sys_name>
        <sys_package display_value="Portal Experience" source="x_376096_pxp">b7a339a3971011102f77b4b3f153afd7</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="Portal Experience">b7a339a3971011102f77b4b3f153afd7</sys_scope>
        <sys_scope_delete display_value="">ca2094845f944cfc9638dcb203038e10</sys_scope_delete>
        <sys_update_name>sys_ui_script_a1a9769497e851102f77b4b3f153af40</sys_update_name>
        <sys_update_version display_value="sys_ui_script_a1a9769497e851102f77b4b3f153af40">aff6b7c39703d190d545b18e6253af28</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-02-02 12:30:51</sys_updated_on>
    </sys_metadata_delete>
</record_update>
